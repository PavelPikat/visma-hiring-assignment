parameters:
  - name: terraformVersion
    type: string

  - name: subscription
    type: string

  - name: allowDestructivePlan
    type: string

  - name: backendKey
    type: string

  - name: workingDirectory
    type: string

steps:
  - task: TerraformInstaller@0
    displayName: 'Install Terraform ${{ parameters.terraformVersion }}'
    inputs:
      terraformVersion: '${{ parameters.terraformVersion }}'

  - task: TerraformCLI@0
    displayName: 'Terraform init'
    inputs:
      command: 'init'
      workingDirectory: '${{ parameters.workingDirectory }}'
      backendType: 'azurerm'
      ensureBaclend: false
      backendServiceArm: '${{ parameters.subscription }}'
      backendAzureRmResourceGroupName: 'terraform-state-rg'
      backendAzureRmStorageAccountName: 'sreterraformstate001'
      backendAzureRmResourceGroupLocation: 'westeurope'
      backendAzureRmContainerName: 'tfstate'
      backendAzureRmKey: '${{ parameters.backendKey }}'
      allowTelemetryCollection: false

  - task: TerraformCLI@0
    displayName: 'Terraform plan'
    inputs:
      command: 'plan'
      workingDirectory: '${{ parameters.workingDirectory }}'
      environmentServiceName: '${{ parameters.subscription }}'
      commandOptions: >-
        -out=${{ parameters.workingDirectory }}\terraform.tfplan
        -detailed-exitcode
      allowTelemetryCollection: false

  - task: TerraformCLI@0
    displayName: 'Terraform show'
    inputs:
      command: show
      workingDirectory: '${{ parameters.workingDirectory }}'
      inputTargetPlanOrStateFilePath: '${{ parameters.workingDirectory }}\terraform.tfplan'
      allowTelemetryCollection: false

  - powershell: |
      Write-Host "##vso[task.logissue type=error] Terraform flagged some Azure resources for deletion which may result in permanent data loss."
      throw "Destructive plan is not allowed"
    displayName: 'Disallow destructive plan'
    condition: and(succeeded(), eq(variables['TERRAFORM_PLAN_HAS_DESTROY_CHANGES'], 'true'), eq('${{ parameters.allowDestructivePlan }}', 'false'))

  - task: TerraformCLI@0
    displayName: 'Terraform apply'
    condition: and(succeeded(), eq(variables['TERRAFORM_PLAN_HAS_CHANGES'], 'true'))
    inputs:
      command: 'apply'
      runAzLogin: false
      workingDirectory: '${{ parameters.workingDirectory }}'
      environmentServiceName: '${{ parameters.subscription }}'
      commandOptions: '${{ parameters.workingDirectory }}\terraform.tfplan'
      allowTelemetryCollection: false

  - task: TerraformCLI@0
    displayName: 'Terraform output'
    inputs:
      command: output
      workingDirectory: '${{ parameters.workingDirectory }}'
      allowTelemetryCollection: false
